openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /api/account-confirm-email/:
    post:
      operationId: account_confirm_email_create
      tags:
      - account-confirm-email
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/login/:
    post:
      operationId: auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          description: ''
  /api/auth/logout/:
    post:
      operationId: auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - auth
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/password/change/:
    post:
      operationId: auth_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/password/reset/:
    post:
      operationId: auth_password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordReset'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/password/reset/confirm/:
    post:
      operationId: auth_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/register/:
    post:
      operationId: auth_register_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomRegister'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomRegister'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomRegister'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/register/verify-email/:
    post:
      operationId: auth_register_verify_email_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/token/refresh/:
    post:
      operationId: auth_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/auth/token/verify/:
    post:
      operationId: auth_token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /api/auth/user/:
    get:
      operationId: auth_user_retrieve
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - auth
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: auth_user_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: auth_user_partial_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/consumer/book:
    post:
      operationId: consumer_book_create
      tags:
      - consumer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Transaction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Transaction'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: ''
  /api/consumer/book/{bookingID}:
    get:
      operationId: consumer_book_retrieve
      parameters:
      - in: path
        name: bookingID
        schema:
          type: integer
        required: true
      tags:
      - consumer
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: ''
    put:
      operationId: consumer_book_update
      parameters:
      - in: path
        name: bookingID
        schema:
          type: integer
        required: true
      tags:
      - consumer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Transaction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Transaction'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: ''
    patch:
      operationId: consumer_book_partial_update
      parameters:
      - in: path
        name: bookingID
        schema:
          type: integer
        required: true
      tags:
      - consumer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTransaction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTransaction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTransaction'
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: ''
    delete:
      operationId: consumer_book_destroy
      parameters:
      - in: path
        name: bookingID
        schema:
          type: integer
        required: true
      tags:
      - consumer
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/consumer/favourite:
    post:
      operationId: consumer_favourite_create
      tags:
      - consumer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Favourite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Favourite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Favourite'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favourite'
          description: ''
  /api/consumer/favourite/{favID}:
    get:
      operationId: consumer_favourite_retrieve
      parameters:
      - in: path
        name: favID
        schema:
          type: integer
        required: true
      tags:
      - consumer
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favourite'
          description: ''
    put:
      operationId: consumer_favourite_update
      parameters:
      - in: path
        name: favID
        schema:
          type: integer
        required: true
      tags:
      - consumer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Favourite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Favourite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Favourite'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favourite'
          description: ''
    patch:
      operationId: consumer_favourite_partial_update
      parameters:
      - in: path
        name: favID
        schema:
          type: integer
        required: true
      tags:
      - consumer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFavourite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFavourite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFavourite'
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favourite'
          description: ''
    delete:
      operationId: consumer_favourite_destroy
      parameters:
      - in: path
        name: favID
        schema:
          type: integer
        required: true
      tags:
      - consumer
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/consumer/favourite/all:
    get:
      operationId: consumer_favourite_all_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - consumer
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedFavouriteList'
          description: ''
  /api/consumer/history:
    get:
      operationId: consumer_history_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - consumer
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTransactionList'
          description: ''
  /api/consumer/review:
    post:
      operationId: consumer_review_create
      tags:
      - consumer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Review'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
  /api/consumer/review/{reviewID}:
    get:
      operationId: consumer_review_retrieve
      parameters:
      - in: path
        name: reviewID
        schema:
          type: integer
        required: true
      tags:
      - consumer
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    put:
      operationId: consumer_review_update
      parameters:
      - in: path
        name: reviewID
        schema:
          type: integer
        required: true
      tags:
      - consumer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Review'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    patch:
      operationId: consumer_review_partial_update
      parameters:
      - in: path
        name: reviewID
        schema:
          type: integer
        required: true
      tags:
      - consumer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedReview'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedReview'
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    delete:
      operationId: consumer_review_destroy
      parameters:
      - in: path
        name: reviewID
        schema:
          type: integer
        required: true
      tags:
      - consumer
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/consumer/vehicle:
    post:
      operationId: consumer_vehicle_create
      tags:
      - consumer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Vehicle'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Vehicle'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
          description: ''
  /api/consumer/vehicle/{vehicleID}:
    get:
      operationId: consumer_vehicle_retrieve
      parameters:
      - in: path
        name: vehicleID
        schema:
          type: integer
        required: true
      tags:
      - consumer
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
          description: ''
    put:
      operationId: consumer_vehicle_update
      parameters:
      - in: path
        name: vehicleID
        schema:
          type: integer
        required: true
      tags:
      - consumer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Vehicle'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Vehicle'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
          description: ''
    patch:
      operationId: consumer_vehicle_partial_update
      parameters:
      - in: path
        name: vehicleID
        schema:
          type: integer
        required: true
      tags:
      - consumer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedVehicle'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedVehicle'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedVehicle'
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
          description: ''
    delete:
      operationId: consumer_vehicle_destroy
      parameters:
      - in: path
        name: vehicleID
        schema:
          type: integer
        required: true
      tags:
      - consumer
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/consumer/vehicle/all:
    get:
      operationId: consumer_vehicle_all_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - consumer
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVehicleList'
          description: ''
  /api/delete/user:
    delete:
      operationId: delete_user_destroy
      tags:
      - delete
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/password/reset/:
    post:
      operationId: password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
      - password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordReset'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/password/reset/confirm/{uidb64}/{token}/:
    post:
      operationId: password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      parameters:
      - in: path
        name: token
        schema:
          type: string
        required: true
      - in: path
        name: uidb64
        schema:
          type: string
        required: true
      tags:
      - password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/provider/history:
    get:
      operationId: provider_history_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - provider
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTransactionList'
          description: ''
  /api/provider/image/{imgID}:
    get:
      operationId: provider_image_retrieve
      parameters:
      - in: path
        name: imgID
        schema:
          type: integer
        required: true
      tags:
      - provider
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
    put:
      operationId: provider_image_update
      parameters:
      - in: path
        name: imgID
        schema:
          type: integer
        required: true
      tags:
      - provider
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Image'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Image'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Image'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
    patch:
      operationId: provider_image_partial_update
      parameters:
      - in: path
        name: imgID
        schema:
          type: integer
        required: true
      tags:
      - provider
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedImage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedImage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedImage'
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
  /api/provider/image/{parkingID}:
    post:
      operationId: provider_image_create
      parameters:
      - in: path
        name: parkingID
        schema:
          type: integer
        required: true
      tags:
      - provider
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Image'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Image'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Image'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
    delete:
      operationId: provider_image_destroy
      parameters:
      - in: path
        name: parkingID
        schema:
          type: integer
        required: true
      tags:
      - provider
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/provider/parking:
    post:
      operationId: provider_parking_create
      tags:
      - provider
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParkingSpace'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ParkingSpace'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ParkingSpace'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingSpace'
          description: ''
  /api/provider/parking/{id}:
    get:
      operationId: provider_parking_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - provider
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingSpace'
          description: ''
    put:
      operationId: provider_parking_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - provider
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParkingSpace'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ParkingSpace'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ParkingSpace'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingSpace'
          description: ''
    patch:
      operationId: provider_parking_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - provider
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedParkingSpace'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedParkingSpace'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedParkingSpace'
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingSpace'
          description: ''
    delete:
      operationId: provider_parking_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - provider
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/provider/parking/all:
    get:
      operationId: provider_parking_all_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - provider
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedParkingSpaceList'
          description: ''
  /api/provider/parking/approved:
    get:
      operationId: provider_parking_approved_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - provider
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedParkingSpaceList'
          description: ''
  /api/provider/parking/bookings/{parkingID}:
    get:
      operationId: provider_parking_bookings_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: path
        name: parkingID
        schema:
          type: integer
        required: true
      tags:
      - provider
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTransactionList'
          description: ''
  /api/provider/parking/images/{parkingID}:
    get:
      operationId: provider_parking_images_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: path
        name: parkingID
        schema:
          type: integer
        required: true
      tags:
      - provider
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedImageList'
          description: ''
  /api/provider/parking/pending:
    get:
      operationId: provider_parking_pending_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - provider
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedParkingSpaceList'
          description: ''
  /api/provider/parking/rejected:
    get:
      operationId: provider_parking_rejected_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - provider
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedParkingSpaceList'
          description: ''
  /api/provider/parking/reviews/{parkingID}:
    get:
      operationId: provider_parking_reviews_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: path
        name: parkingID
        schema:
          type: integer
        required: true
      tags:
      - provider
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedReviewList'
          description: ''
  /api/registration/:
    post:
      operationId: registration_create
      tags:
      - registration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomRegister'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomRegister'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomRegister'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/registration/verify-email/:
    post:
      operationId: registration_verify_email_create
      tags:
      - registration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
components:
  schemas:
    CustomRegister:
      type: object
      properties:
        username:
          type: string
          maxLength: 150
          minLength: 1
        email:
          type: string
          format: email
        password1:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
        phone_number:
          type: string
          maxLength: 20
        first_name:
          type: string
          maxLength: 20
        last_name:
          type: string
          maxLength: 20
      required:
      - email
      - first_name
      - last_name
      - password1
      - password2
      - phone_number
      - username
    Favourite:
      type: object
      properties:
        consumer:
          type: integer
        parkingSpace:
          type: integer
        pk:
          type: integer
          readOnly: true
          title: ID
      required:
      - consumer
      - parkingSpace
      - pk
    Image:
      type: object
      properties:
        image_data:
          type: string
        pk:
          type: integer
          readOnly: true
          title: ID
      required:
      - image_data
      - pk
    JWT:
      type: object
      description: Serializer for JWT authentication.
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        user:
          $ref: '#/components/schemas/User'
      required:
      - access_token
      - refresh_token
      - user
    Login:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
      - password
    PaginatedFavouriteList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Favourite'
    PaginatedImageList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Image'
    PaginatedParkingSpaceList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/ParkingSpace'
    PaginatedReviewList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Review'
    PaginatedTransactionList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
    PaginatedVehicleList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Vehicle'
    ParkingSpace:
      type: object
      description: Adds update nested feature
      properties:
        provider:
          type: integer
        streetAddress:
          type: string
          maxLength: 100
        city:
          type: string
          maxLength: 100
        state:
          type: string
          maxLength: 3
        postcode:
          type: string
          maxLength: 4
        price:
          type: integer
        size:
          type: string
          maxLength: 100
        notes:
          type: string
          maxLength: 10000
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        status:
          allOf:
          - $ref: '#/components/schemas/StatusEnum'
          readOnly: true
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
        avg_rating:
          type: string
          format: decimal
          pattern: ^-?\d{0,1}(?:\.\d{0,1})?$
          readOnly: true
          nullable: true
        n_ratings:
          type: integer
          readOnly: true
          nullable: true
        is_active:
          type: boolean
          readOnly: true
        pk:
          type: integer
          readOnly: true
          title: ID
      required:
      - avg_rating
      - city
      - endTime
      - images
      - is_active
      - n_ratings
      - notes
      - pk
      - postcode
      - price
      - provider
      - size
      - startTime
      - state
      - status
      - streetAddress
    PasswordChange:
      type: object
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
      required:
      - new_password1
      - new_password2
    PasswordReset:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PasswordResetConfirm:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
        uid:
          type: string
        token:
          type: string
      required:
      - new_password1
      - new_password2
      - token
      - uid
    PatchedFavourite:
      type: object
      properties:
        consumer:
          type: integer
        parkingSpace:
          type: integer
        pk:
          type: integer
          readOnly: true
          title: ID
    PatchedImage:
      type: object
      properties:
        image_data:
          type: string
        pk:
          type: integer
          readOnly: true
          title: ID
    PatchedParkingSpace:
      type: object
      description: Adds update nested feature
      properties:
        provider:
          type: integer
        streetAddress:
          type: string
          maxLength: 100
        city:
          type: string
          maxLength: 100
        state:
          type: string
          maxLength: 3
        postcode:
          type: string
          maxLength: 4
        price:
          type: integer
        size:
          type: string
          maxLength: 100
        notes:
          type: string
          maxLength: 10000
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        status:
          allOf:
          - $ref: '#/components/schemas/StatusEnum'
          readOnly: true
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
        avg_rating:
          type: string
          format: decimal
          pattern: ^-?\d{0,1}(?:\.\d{0,1})?$
          readOnly: true
          nullable: true
        n_ratings:
          type: integer
          readOnly: true
          nullable: true
        is_active:
          type: boolean
          readOnly: true
        pk:
          type: integer
          readOnly: true
          title: ID
    PatchedReview:
      type: object
      properties:
        parkingSpace:
          type: integer
        consumer:
          type: string
        rating:
          type: string
          format: decimal
          pattern: ^-?\d{0,1}(?:\.\d{0,1})?$
        comment:
          type: string
        publishDate:
          type: string
          format: date-time
          readOnly: true
        pk:
          type: integer
          readOnly: true
          title: ID
    PatchedTransaction:
      type: object
      description: |-
        A ModelSerializer that takes additional arguments for
        "fields", "omit" and "expand" in order to
        control which fields are displayed, and whether to replace simple
        values with complex, nested serializations
      properties:
        provider:
          type: integer
        consumer:
          type: integer
        vehicle:
          type: integer
        parkingSpace:
          type: integer
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        totalCost:
          type: string
          format: decimal
          pattern: ^-?\d{0,4}(?:\.\d{0,2})?$
        pk:
          type: integer
          readOnly: true
          title: ID
    PatchedUser:
      type: object
      properties:
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        username:
          type: string
          readOnly: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        first_name:
          type: string
          readOnly: true
        last_name:
          type: string
          readOnly: true
        phone_number:
          type: string
          maxLength: 20
        card_number:
          type: string
          maxLength: 16
        expiry_date:
          type: string
          maxLength: 5
        cvc:
          type: string
          maxLength: 3
        bsb:
          type: string
          maxLength: 6
        account_number:
          type: string
          maxLength: 10
        account_name:
          type: string
          maxLength: 100
        is_staff:
          type: boolean
        pk:
          type: integer
          readOnly: true
          title: ID
    PatchedVehicle:
      type: object
      properties:
        user:
          type: integer
        carMake:
          type: string
          maxLength: 100
        carModel:
          type: string
          maxLength: 100
        carYear:
          type: integer
        carColour:
          type: string
          maxLength: 100
        carRego:
          type: string
          maxLength: 6
        pk:
          type: integer
          readOnly: true
          title: ID
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
      - detail
    Review:
      type: object
      properties:
        parkingSpace:
          type: integer
        consumer:
          type: string
        rating:
          type: string
          format: decimal
          pattern: ^-?\d{0,1}(?:\.\d{0,1})?$
        comment:
          type: string
        publishDate:
          type: string
          format: date-time
          readOnly: true
        pk:
          type: integer
          readOnly: true
          title: ID
      required:
      - comment
      - consumer
      - parkingSpace
      - pk
      - publishDate
      - rating
    StatusEnum:
      enum:
      - pending
      - approved
      - rejected
      type: string
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    Transaction:
      type: object
      description: |-
        A ModelSerializer that takes additional arguments for
        "fields", "omit" and "expand" in order to
        control which fields are displayed, and whether to replace simple
        values with complex, nested serializations
      properties:
        provider:
          type: integer
        consumer:
          type: integer
        vehicle:
          type: integer
        parkingSpace:
          type: integer
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        totalCost:
          type: string
          format: decimal
          pattern: ^-?\d{0,4}(?:\.\d{0,2})?$
        pk:
          type: integer
          readOnly: true
          title: ID
      required:
      - consumer
      - endTime
      - parkingSpace
      - pk
      - provider
      - startTime
      - totalCost
      - vehicle
    User:
      type: object
      properties:
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        username:
          type: string
          readOnly: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        first_name:
          type: string
          readOnly: true
        last_name:
          type: string
          readOnly: true
        phone_number:
          type: string
          maxLength: 20
        card_number:
          type: string
          maxLength: 16
        expiry_date:
          type: string
          maxLength: 5
        cvc:
          type: string
          maxLength: 3
        bsb:
          type: string
          maxLength: 6
        account_number:
          type: string
          maxLength: 10
        account_name:
          type: string
          maxLength: 100
        is_staff:
          type: boolean
        pk:
          type: integer
          readOnly: true
          title: ID
      required:
      - account_name
      - account_number
      - bsb
      - card_number
      - cvc
      - expiry_date
      - first_name
      - last_name
      - phone_number
      - pk
      - username
    Vehicle:
      type: object
      properties:
        user:
          type: integer
        carMake:
          type: string
          maxLength: 100
        carModel:
          type: string
          maxLength: 100
        carYear:
          type: integer
        carColour:
          type: string
          maxLength: 100
        carRego:
          type: string
          maxLength: 6
        pk:
          type: integer
          readOnly: true
          title: ID
      required:
      - carColour
      - carMake
      - carModel
      - carRego
      - carYear
      - pk
      - user
    VerifyEmail:
      type: object
      properties:
        key:
          type: string
      required:
      - key
  securitySchemes:
    jwtCookieAuth:
      type: apiKey
      in: cookie
      name: my-app-auth
    jwtHeaderAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
